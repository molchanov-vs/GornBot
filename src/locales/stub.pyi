from decimal import Decimal
from typing import Literal

from fluent_compiler.types import FluentType
from typing_extensions import TypeAlias

PossibleValue: TypeAlias = str | int | float | Decimal | bool | FluentType

class TranslatorRunner:
    def get(self, path: str, **kwargs: PossibleValue) -> str: ...
    service: Service
    feedback: Feedback

class Service:
    @staticmethod
    def lang() -> Literal["""ru"""]: ...
    @staticmethod
    def back_btn() -> Literal["""‚óÄÔ∏è –ù–∞–∑–∞–¥"""]: ...
    @staticmethod
    def next_btn() -> Literal["""–î–∞–ª–µ–µ ‚ñ∂Ô∏è"""]: ...
    @staticmethod
    def done_btn() -> Literal["""‚úÖ –ì–æ—Ç–æ–≤–æ"""]: ...
    @staticmethod
    def contact_btn() -> Literal["""üí¨ –°–≤—è–∑–∞—Ç—å—Å—è"""]: ...
    @staticmethod
    def to_msg_btn() -> Literal["""üëÄ –ö —Å–æ–æ–±—â–µ–Ω–∏—é"""]: ...
    @staticmethod
    def admin_btn() -> Literal["""üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞"""]: ...
    @staticmethod
    def support_btn() -> Literal["""üë®üèª‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞"""]: ...

class Feedback:
    @staticmethod
    def discipline(*, name: PossibleValue) -> Literal["""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, { $name }.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:"""]: ...
    @staticmethod
    def task(*, discipline: PossibleValue) -> Literal["""–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ &lt;b&gt;{ $discipline }&lt;/b&gt;.

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:"""]: ...
    @staticmethod
    def input(*, task_name: PossibleValue) -> Literal["""–í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ &lt;b&gt;{ $task_name }&lt;/b&gt;

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å"""]: ...
    @staticmethod
    def audio() -> Literal["""–í–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:"""]: ...
    @staticmethod
    def output() -> Literal["""–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"""]: ...
